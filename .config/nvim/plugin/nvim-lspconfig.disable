" lsp config {{{
lua << EOF

vim.lsp.set_log_level("debug")
local nvim_lsp = require('lspconfig')
local lsp_status = require('lsp-status')
local completion = require('completion')

local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

	-- Status

	lsp_status.register_progress()
	lsp_status.config({
		status_symbol = '',
		indicator_errors = 'e',
		indicator_warnings = 'w',
		indicator_info = 'i',
		indicator_hint = 'h',
		indicator_ok = 'top',
	})

  -- Mappings.
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)

	-- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  end

	-- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
      hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow
      hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow
      hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow
      augroup lsp_document_highlight
        autocmd!
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]], false)
  end

  lsp_status.on_attach(client, bufnr)
  completion.on_attach(client, bufnr)
end

-- Add the server that troubles you here
local name = "elixirls"
local cmd = { "/home/jhh/.local/src/github.com/elixir-lsp/language_server.sh" }

nvim_lsp[name].setup {
	cmd = cmd,
	on_attach = on_attach,
	settings={
		fetchDeps=false,
		dialyzerEnabled=true,
		dialyzerFormat='dialyxir_short'
	},
	capabilities = lsp_status.capabilities
}

EOF
" }}}

"
" ----------

" " keybindings {{{
" nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
" nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
" nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
" nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
" nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
" nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
" " }}}
"
" formatting {{{
autocmd BufWritePre *.ex lua vim.lsp.buf.formatting()
autocmd BufWritePre *.exs lua vim.lsp.buf.formatting()
" }}}

" completion {{{
" set completeopt=menuone,noinsert,noselect
" let g:completion_enable_auto_popup = 0
" let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
" inoremap <silent><expr> <c-p> completion#trigger_completion()
" }}}

" " diagnostic {{{
" let g:diagnostic_enable_virtual_text = 1
" let g:diagnostic_auto_popup_while_jump = 1
" " }}}
"
" vim.lsp.set_log_level("trace")
" local lsp_status = require('lsp-status')
" local completion = require('completion')
" local lsp        = require('lspconfig')

" local on_attach = function(client, bufnr)

"   local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
"   local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

"   lsp_status.on_attach(client, bufnr)
"   completion.on_attach(client, bufnr)

" 	print(client)
" 	if client.resolved_capabilities.document_formatting then
" 		buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
" 	elseif client.resolved_capabilities.document_range_formatting then
" 		buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
" 	end
" end


" -- elixirls
" lsp.elixirls.setup{
"   cmd = { "/home/jhh/.local/src/github.com/elixir-lsp/language_server.sh" };
"   on_attach = on_attach,
"   settings={
" 		fetchDeps=false,
" 		dialyzerEnabled=false,
" 		dialyzerFormat='dialyxir_short'
" 	},
"   capabilities = lsp_status.capabilities
" }
" EOF
"
